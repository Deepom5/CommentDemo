{"ast":null,"code":"var _jsxFileName = \"/Users/deepomchowdhury/Downloads/Interactive-Comments-main/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Components/Styles/App.scss\";\nimport Comment from \"./Components/Comment\";\nimport AddComment from \"./Components/AddComment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [comments, updateComments] = useState([]);\n  const [deleteModalState, setDeleteModalState] = useState(false);\n  const getData = async () => {\n    const res = await fetch(\"./data/data.json\");\n    const data = await res.json();\n    updateComments(data.comments);\n  };\n  useEffect(() => {\n    localStorage.getItem(\"comments\") !== null ? updateComments(JSON.parse(localStorage.getItem(\"comments\"))) : getData();\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"comments\", JSON.stringify(comments));\n    deleteModalState ? document.body.classList.add(\"overflow--hidden\") : document.body.classList.remove(\"overflow--hidden\");\n  }, [comments, deleteModalState]);\n\n  // update score\n  let updateScore = (score, id, type) => {\n    let updatedComments = [...comments];\n    if (type === \"comment\") {\n      updatedComments.forEach(data => {\n        if (data.id === id) {\n          data.score = score;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach(comment => {\n        comment.replies.forEach(data => {\n          if (data.id === id) {\n            data.score = score;\n          }\n        });\n      });\n    }\n    updateComments(updatedComments);\n  };\n\n  // add comments\n  let addComments = newComment => {\n    let updatedComments = [...comments, newComment];\n    updateComments(updatedComments);\n  };\n\n  // add replies\n  let updateReplies = (replies, id) => {\n    let updatedComments = [...comments];\n    updatedComments.forEach(data => {\n      if (data.id === id) {\n        data.replies = [...replies];\n      }\n    });\n    updateComments(updatedComments);\n  };\n\n  // edit comment\n  let editComment = (content, id, type) => {\n    let updatedComments = [...comments];\n    if (type === \"comment\") {\n      updatedComments.forEach(data => {\n        if (data.id === id) {\n          data.content = content;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach(comment => {\n        comment.replies.forEach(data => {\n          if (data.id === id) {\n            data.content = content;\n          }\n        });\n      });\n    }\n    updateComments(updatedComments);\n  };\n\n  // delete comment\n  let commentDelete = (id, type, parentComment) => {\n    let updatedComments = [...comments];\n    let updatedReplies = [];\n    if (type === \"comment\") {\n      updatedComments = updatedComments.filter(data => data.id !== id);\n    } else if (type === \"reply\") {\n      comments.forEach(comment => {\n        if (comment.id === parentComment) {\n          updatedReplies = comment.replies.filter(data => data.id !== id);\n          comment.replies = updatedReplies;\n        }\n      });\n    }\n    updateComments(updatedComments);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"App\",\n    children: [comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n      commentData: comment,\n      updateScore: updateScore,\n      updateReplies: updateReplies,\n      editComment: editComment,\n      commentDelete: commentDelete,\n      setDeleteModalState: setDeleteModalState\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(AddComment, {\n      buttonValue: \"send\",\n      addComments: addComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Ye1rPW7xRkrmEDK02fTzOLS0H3o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Comment","AddComment","jsxDEV","_jsxDEV","App","_s","comments","updateComments","deleteModalState","setDeleteModalState","getData","res","fetch","data","json","localStorage","getItem","JSON","parse","setItem","stringify","document","body","classList","add","remove","updateScore","score","id","type","updatedComments","forEach","comment","replies","addComments","newComment","updateReplies","editComment","content","commentDelete","parentComment","updatedReplies","filter","className","children","map","commentData","fileName","_jsxFileName","lineNumber","columnNumber","buttonValue","_c","$RefreshReg$"],"sources":["/Users/deepomchowdhury/Downloads/Interactive-Comments-main/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Components/Styles/App.scss\";\nimport Comment from \"./Components/Comment\";\nimport AddComment from \"./Components/AddComment\";\n\nconst App = () => {\n  const [comments, updateComments] = useState([]);\n  const [deleteModalState, setDeleteModalState] = useState(false);\n\n  const getData = async () => {\n    const res = await fetch(\"./data/data.json\");\n    const data = await res.json();\n    updateComments(data.comments);\n  };\n\n  useEffect(() => {\n    localStorage.getItem(\"comments\") !== null\n      ? updateComments(JSON.parse(localStorage.getItem(\"comments\")))\n      : getData();\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"comments\", JSON.stringify(comments));\n    deleteModalState\n      ? document.body.classList.add(\"overflow--hidden\")\n      : document.body.classList.remove(\"overflow--hidden\");\n  }, [comments, deleteModalState]);\n\n  // update score\n  let updateScore = (score, id, type) => {\n    let updatedComments = [...comments];\n\n    if (type === \"comment\") {\n      updatedComments.forEach((data) => {\n        if (data.id === id) {\n          data.score = score;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach((comment) => {\n        comment.replies.forEach((data) => {\n          if (data.id === id) {\n            data.score = score;\n          }\n        });\n      });\n    }\n    updateComments(updatedComments);\n  };\n\n  // add comments\n  let addComments = (newComment) => {\n    let updatedComments = [...comments, newComment];\n    updateComments(updatedComments);\n  };\n\n  // add replies\n  let updateReplies = (replies, id) => {\n    let updatedComments = [...comments];\n    updatedComments.forEach((data) => {\n      if (data.id === id) {\n        data.replies = [...replies];\n      }\n    });\n    updateComments(updatedComments);\n  };\n\n  // edit comment\n  let editComment = (content, id, type) => {\n    let updatedComments = [...comments];\n\n    if (type === \"comment\") {\n      updatedComments.forEach((data) => {\n        if (data.id === id) {\n          data.content = content;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach((comment) => {\n        comment.replies.forEach((data) => {\n          if (data.id === id) {\n            data.content = content;\n          }\n        });\n      });\n    }\n\n    updateComments(updatedComments);\n  };\n\n  // delete comment\n  let commentDelete = (id, type, parentComment) => {\n    let updatedComments = [...comments];\n    let updatedReplies = [];\n\n    if (type === \"comment\") {\n      updatedComments = updatedComments.filter((data) => data.id !== id);\n    } else if (type === \"reply\") {\n      comments.forEach((comment) => {\n        if (comment.id === parentComment) {\n          updatedReplies = comment.replies.filter((data) => data.id !== id);\n          comment.replies = updatedReplies;\n        }\n      });\n    }\n\n    updateComments(updatedComments);\n  };\n\n  return (\n    <main className=\"App\">\n      {comments.map((comment) => (\n        <Comment\n          key={comment.id}\n          commentData={comment}\n          updateScore={updateScore}\n          updateReplies={updateReplies}\n          editComment={editComment}\n          commentDelete={commentDelete}\n          setDeleteModalState={setDeleteModalState}\n        />\n      ))}\n      <AddComment buttonValue={\"send\"} addComments={addComments} />\n    </main>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}